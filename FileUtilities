import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * This class is to store utilities that are to be utilized for operations on
 * files and folders.
 */
public class FileUtils {

    /**
     * Extracts all files and folders within a .zip file to a given directory
     *
     * @param zipFileDir  path to the .zip file, as a String
     * @param zipFileName name of the .zip file, as a String
     * @param unzipDir    path to the folder where extracted files are to be stored at, as a String
     */
    public static void unzipAllFiles(String zipFileDir, String zipFileName, String unzipDir) {
        String zipFilePath = zipFileDir + File.separator + zipFileName;
        try {
            Path path = Paths.get(unzipDir);
            if (!Files.exists(path))
                Files.createDirectory(path);

            ZipFile zipFile = new ZipFile(zipFilePath);

            Enumeration<? extends ZipEntry> entries = zipFile.entries();

            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (entry.isDirectory()) {
                    String destPath = unzipDir + File.separator + entry.getName();
                    File file = new File(destPath);
                    file.mkdirs();
                } else {
                    String destPath = unzipDir + File.separator + entry.getName();
                    try (InputStream inputStream = zipFile.getInputStream(entry);
                         FileOutputStream outputStream = new FileOutputStream(destPath)) {
                        int data = inputStream.read();
                        while (data != -1) {
                            outputStream.write(data);
                            data = inputStream.read();
                        }
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("Error unzipping file " + zipFilePath, e);
        }
    }


    /**Given a path to a folder as a String
     * returns List of file names within the folder
     * @param path  as a String
     * @return  List<String> of file names within
     */
    public static List<String> getFileNames(String path) {
        List<String> resultList = new ArrayList<>();

        File[] files = new File(path).listFiles();

        for (File file : files)
            if (file.isFile()) resultList.add(file.getName());

        return resultList;
    }

    /**Given the prefix (location folder) as a String
     * and the path to the folder where files are stored
     * returns the list of complete paths to each file.
     * @param locationFolder to serve as a prefix, as a String
     * @param path to get the file names, as a String
     * @return List<String> of complete paths to files
     */
    public static List<String> getFileNames(String locationFolder, String path) {
        List<String> fileNames = getFileNames(path);
        List<String> resultList = new ArrayList<>();

        for (String file : fileNames) {
            resultList.add(locationFolder + File.separator + file);
        }

        return resultList;
    }
}
